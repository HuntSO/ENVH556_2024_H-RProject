---
title: "Getting Started with R, RStudio, & Quarto Markdown Files"
subtitle: "ENVH 556"
format:
  html:
    toc: true
    toc-depth: 3
    number-sections: true
    df-print: paged
urlcolor: blue
---

This document was rendered on `r format(Sys.time(), '%B %d, %Y')`.

Credit: This document has benefited by work done by Emily Voldal, Brian High, Lianne Sheppard, Chris Zuidema, and Magali Blanco.


```{r setup, eval=TRUE, include=FALSE}
#-----setup------

# Set knitr options:
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, messages = FALSE, 
                      tidy.opts=list(width.cutoff = 80, blank = TRUE) )

# Set R option: show only 2 digits when displaying
options(digits = 4)

# Clear workspace of all objects and unload all extra (non-base) packages
rm(list = ls(all = TRUE))
if (!is.null(sessionInfo()$otherPkgs)) {
    res <- suppressWarnings(
        lapply(paste('package:', names(sessionInfo()$otherPkgs), sep=""),
               detach, character.only=TRUE, unload=TRUE, force=TRUE))
}

# Load key packages using pacman (see below for explanation)
my_repo <- 'http://cran.r-project.org'
if (!require("pacman")) {install.packages("pacman", repos = my_repo)}

# Load the other packages, installing as needed
# Key principle:  Only load the packages you will need
pacman::p_load(knitr, readr, dplyr, ggplot2)

```


# Introduction

## Why R Markdown and reproducible reports?

All good data analysis should be reproducible. Markdown is a popular variant of the syntax often used in Wikis, such as Wikipedia. R Markdown is an extension of Markdown to support the execution and rendering of R code within the document. It integrates easily with R to allow you to produce reproducible reports. We will use these tools and reproducible research practices to support your development in this course.

## What is Markdown, and why bother?

Just like an R script is better than typing code in the console, using Markdown is better than using an R script. Markdown documents allow you to save your code, the output that corresponds to your code, and a record of how each calculation and figure was created. Not only will this help you with the homework for this class, it's good practice for doing reproducible research.

Although a `.qmd` document looks a lot different from an R script, the basics of Markdown are straightforward compared to the rest of R. After you become familiar with the tricks of Markdown, you may find it easier and faster to use than an R script.

## How to use Markdown

The output (e.g. `.html` or `.pdf`) and source (`.qmd`) documents are optimally used side-by-side so that you can see both the code and its result.

# Getting started with R and RStudio

## Log onto RStudio Server

In ENVH 556 we will ensure that all applications and labs work on either of 2 UW [RStudio](https://www.rstudio.com/) servers running on virtual Linux machines:

-   Plasmid, for DEOHS and EPI students: [plasmid.deohs.washington.edu](https://plasmid.deohs.washington.edu/).
-   SPH server, for all students: [rstudio.sph.washington.edu](https://rstudio.sph.washington.edu/)

If you are off campus, you will need to install and sign into [Husky OnNet VPN](https://itconnect.uw.edu/connect/uw-networks/about-husky-onnet/) using your UW NetID to use these servers. Plasmid is connected to you departmental network storage.

In addition to centralized application installation and management, RStudio servers provide users a higher level of performance and security compared to local installations.

Another (non-UW) RStudio server option is [RStudio Cloud](https://rstudio.cloud/).

## Install applications locally on your computer

You are welcome to do your work locally on your laptop, but we will not be able to provide support for local installations. You will need the most recent version of RStudio and R. An easy way to do this is to follow directions on a tutorial program (Swirl) which begins by walking you through the process of downloading R and RStudio. Here is the link to the Swirl tutorial: <https://swirlstats.com/students.html>. The first few Swirl lessons cover the "Basics of R Programming" which may help new R users become familiar with R and RStudio.

If, at any point during this process, R tells you that you need to install other packages, do so.

## Become familiar with R and RStudio

The rest of this document focuses on using Markdown in the course. We assume you are already familiar with R and RStudio. If not, there are many resources available to learn R and RStudio. Here are a few suggestions:

-   The [R for Data Science (R4DS)](https://r4ds.had.co.nz/) book by Hadley Wickham and Garrett Grolemund.
-   An R ["Onramp"](https://github.com/deohs/r_onramp/blob/master/README.md) made for beginners by the DEOHS [Coders Group](https://github.com/deohs/coders).
    -   Within the [Resources and getting help](https://github.com/deohs/r_onramp/blob/master/r_resources_and_getting_help.md) section, there are many courses, tutorials, and books we suggest.

# Getting Started with Markdown

To **open a new Markdown document** (`.qmd`), select 'File', 'New File', 'Quarto Document'. You will see a window asking you for some information about your document; R will use this information to fill in some code in the file, which you can change at any time. For now, leave the default HTML setting and fill in whatever you want for the title and author. Save this file, just like you would save an R script.

The following text is included in new Markdown documents you create:

> Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org...

To turn this code into a nicely formatted document, select the **'Render'** button or run `quarto render filename.qmd` in the terminal. This will generate the output and save it in the same location as the `.qmd` file.

You can \*\*run code\* line-by-line from the `.qmd` document as you build it. It can be helpful to render often.

You can use the drop-down menu of the 'Run' button in the toolbar for additional options, such as running the next chunk, running all chunks above, or running all chunks. The arrows to the left of the 'Run' button can help you navigate through your document, especially when working with larger files.

RStudio's text editor includes a basic **spell-checker**, which works well for regular text but does not check code or special symbols. To use it, click the button with 'ABC' and a green check mark, located to the right of the save button in the toolbar for the text editor panel.

If you're looking for a more sophisticated option that also checks grammar, you can render the document to a Word file and use Word's spell-checker. However, avoid pasting code back into the text editor from Word, as MS Word may modify characters (such as quotes), which can break your code.

Here are several good Quarto resources to help you get started:

-   [Quarto Website](https://quarto.org/)
-   [Markdown Basics](https://quarto.org/docs/authoring/markdown-basics.html)
-   [Quarto Tutorial](https://quarto.org/docs/get-started/hello/rstudio.html)
    -   Includes Video
-   [Quarto Guide](https://quarto.org/docs/guide/)

# Anatomy of a `.qmd` file

## YAML header

The header is enclosed by dashes and is always at the top of the file. By default, it will include a title, author, date, and what type of file it will render to. You can change the text of the title, author, and date here any time. These will show up at the top of your knitted document. You can also change the file type at any time. For example, replacing `html_document` with `word_document`, will render a Word file. However, be aware that some commands are specific to certain document types, or just show up differently. Generally `html_document` seems to be the most flexible and least fussy type of output.

### Set Global Chunk Options in Quarto

Global chunk options can be set using the YAML header or within individual chunks. These options control how code is rendered throughout the document.

### Example using the YAML header

You can specify global chunk options in the YAML header of your `.qmd` file. For example:

``` yaml
---
title: "Your Document Title"
format: 
  html:
    code-fold: true     # Enables code folding for better readability
execute:
  echo: false           # Hides code output globally
  warning: false        # Suppresses warnings globally
  cache: true           # Enables caching globally
---
```

You can mix global options in the YAML header and override them for specific chunks when needed.

## Text

To put plain text into an Markdown document, you don't need anything special. Text that is black in the `.qmd` document is plain text in the rendered document.

Blue text in the `.qmd` indicates that it has been formatted in some way by using special characters (for example, the knitted text may be bold).

There are some things that you might be used to in other text processors (like Word) which aren't as straightforward in Markdown. When formatting assignments for this class, you should not spend much time making your text 'pretty', but your answers should be well-organized. This section will cover some (easy) things to do in Markdown to organize and manipulate text.

You can make font **bold**, or *italicized*.

You can make numbered lists (see the Table of Contents), or bulleted lists:

-   Item 1
-   Item 2

You can organize your content using **headings**, which are indicated by `#` (see my section headings). The more pound symbols, the smaller the heading. We show these examples without knitting them:

```         
# Title (level 1)
## Subtitle (level 2)  
### Sub-subtitle (level 3)  
#### Sub-sub-subtitle (level 4)
```

In Quarto, you can use the following for **dividers** and page breaks:

-   To insert a horizontal line (divider) in your document, use three or more asterisks (`***`) or dashes (`---`):

    ## **Example**:

------------------------------------------------------------------------

-   To create a page break (only for certain formats like PDF), use `\newpage`. Note that this will not work for HTML output.

In Quarto, comments enclosed in <!-- --> are hidden in all output formats, allowing you to leave notes or reminders in your source file without them showing up in the final document. For example:

`<!-- This is a text comment and won't appear in the output -->`

<!-- This is a text comment and won't appear in the output -->

### Greek Letters and Equations With LaTeX

If you want to make your text clearer by using nicely formatted equations, you can use the math language LaTeX to write Greek letters and equations. Below are some examples that you can copy and paste, or just Google it.

This is *not* an expectation for ENVH 556, it's just something extra for those of you who are interested. Here is a [Cheatsheet for LaTeX Math Commands](https://tilburgsciencehub.com/topics/research-skills/templates-dynamic-content/templates/amsmath-latex-cheatsheet/)

$\alpha$

$\alpha_0$

$\alpha_1$

$\beta$

$\pi$

$x_{Exposure}$

$e^{\beta}$

So we can write out models:

$\log(x_{Disease})=\alpha_0+\beta x_{Exposure}$

or

log($x_{Disease}$) = $\alpha_0$ + $\beta$ $x_{Exposure}$

## Chunks

Interspersed in the text are lines of code; these may have a shaded background in your file; these are called 'chunks'. Chunks start with ```` ```{r} ```` and end with ```` ``` ````, each at the beginning of the line. You can think of each chunk as a miniature R script. If we removed all the text from a `.qmd`, the chunks would make up the complete R script for that analysis. (The code appendix does this for you automatically; see below.)

Within a Markdown document, your code all needs to be in order (you can't print a plot after your first paragraph if you don't load the data set until paragraph three). You also can't use *anything* outside the Markdown document; you need to load packages, load data, etc. all within this Markdown document. This will become an issue when you try to render the document, even if it worked while running code straight from the `.qmd`.

Below is the basic format of a chunk. You can make new chunks by pressing 'Ctrl' 'Alt' 'i' in Windows, or 'Cmd' 'Option' 'i' in Macs.

It is good practice to name every chunk with a word following `r`, e.g. `{r chunk_name_goes_here, and chunk options go after the comma, options separated by commas}`.

```{r example_chunk}
#-----example chunk-----------

# Code goes here; output appears below

# By setting the seed, we follow the reproducible research practice that my
# random numbers are the same each time.
set.seed(45)

# Generate random numbers from a Normal distribution and save as a vector.
a <- rnorm(mean=0, sd=2, n=20)
mean(a)

```

The code and output above would not be acceptable in a homework write-up. You can use chunk options to change how code and output appear in the knitted document (but chunk options don't affect anything when you are running code chunk by chunk inside the `.qmd` document). Below, I'll give some examples of chunk options; check out the knitted document to see what each of them do. Chunk options can be combined by separating them with commas.

### Chunk options

We can control what the code and output of each chunk look like by changing 'chunk options'.

*eval=FALSE*

The following code won't be run.

```{r code_chunk_that_will_not_run, eval=FALSE, error=TRUE}
#-----code chunk that will not run----

# This code won't be run!
mean(a)
mean(I can type whatever I want because this is not run.)

```

*echo=FALSE*

The following code won't be shown, but it will run and the output will be displayed.

```{r example_chunk_that_will_not_be_shown, echo=FALSE}
#-----example chunk that will not be shown-----

# This code won't be shown, but it will be run and output will show up.
mean(a)

```

*results="hide"*

The following output won't be shown, but the code will still run in R.

```{r example_chunk_that_will_not_show_output, results="hide"}
#-----example chunk that will not show output------

# This output won't be shown, but it will still run in R.
mean_of_a <- mean(a)
mean_of_a

```

*Hiding Absolutely Everything: include=FALSE*

To hide absolutely everything, you could use these chunk options:

`include=FALSE`

Or, equivalently:

`echo=FALSE, results='hide', message=FALSE, warning=FALSE, fig.show='hide'`

For more information about `include=FALSE`, see: https://yihui.name/en/2017/11/knitr-include-false/

It is possible to hide errors and warnings in your knitted document. **Do not** leave the `message=FALSE` and `warning=FALSE` options turned on while you are creating your document because they will hide important messages from R. Just add these when you are done coding; for example, using `library()` or `p_load()` often creates some messages which you may wish to hide in your final document. In general, we *want* to see the messages and warnings from R as we are coding.

The following chunk won't be shown and it creates output that won't be shown. However, the code will still run in R.

```{r example_chunk_hides_everything, include=FALSE}
#-----example chunk hides everything----------

# This would be how to do all your coding for which you don't want to show the
# output in your lab report. All this code runs, but nothing shows up in your
# knitted document. Any variable I create here will be 'remembered' for the rest
# of this knitted document.
mean(a)

```

*Accept errors: error=TRUE*

When `error=TRUE` is set, the document will continue rendering even if the code in the chunk throws an error. Instead of halting the process, Quarto or R Markdown will display the error message in the output document where the error occurred.

This chunk option is a temporary band-aid to help you record and understand the error; **do not** make all your chunks `error=TRUE` as a way of bypassing code issues.

```{r example_chunk_accept_errors, error=TRUE}
#-----example chunk accept errors-----

# Sometimes in a work-in-progress, you may want a knitted copy of everything -
# even things that go wrong. This wouldn't be a chunk option to use in a
# polished homework assignment. This is an error because I haven't loaded the
# titanic data in this document yet (regardless of whether it's loaded in my
# RStudio right now)
head(titanic) 
mean(a)

```

## Plots

To print a plot, you don't need any special chunk options.

```{r example_plot}
#-----example plot-----

hist(a)

```

However, to hide a plot you need to use `include=FALSE`, which hides all code and output (using `results="hide"` won't work on plots).

*include=FALSE to hide a plot and its code*

The following chunk is hidden, as is its output.

```{r example_plot_is_hidden,include=FALSE}
#-----example plot is hidden----------

# Still run in R, though!
hist(a)

```

## Tables

Markdown has the ability to create nice tables (nice enough to use for homework). There are several different packages for creating tables; these include `kable`, `stargazer`, and `xtable`. `kable` is the simplest to use and we show examples in Lab 1. If you wish to develop more sophisticated tables, explore these other packages.

```{r example_table_with_data_generation}
#-----example table with data generation----

# Generate some toy data as vectors
sex <- rbinom(1, n = 20, prob = .5)
height <- rnorm(mean = (50 + 10 * sex), sd = 10, n = 20)
hair_color <- rep(c("brown", "black", "blond"), length = 20)

# combine within a "tibble" dataframe, oriented by columns
toy.data <- tibble(sex, height, hair_color)

# Create a table with the average and standard deviation of height for each 
# hair color category using `dplyr` functions and the pipe operator, `%>%`, which 
# feeds the output of one function into the input of the next function. 
# The `` notation acommodates non-standard variable names.
table_df <- toy.data %>% 
  group_by(hair_color) %>% 
  summarise(`Average height` = mean(height), 
            `SD of height` = sd(height), 
            .groups = "drop") %>% 
  rename(`Hair color` = hair_color)

#example kable table with caption
kable(table_df, caption="Height by hair color")

```

# Markdown strategies to enhance reproducibility

Reproducible reports with embedded data analyses have many benefits, including:

-   Eliminates typos and transcription errors by pulling results directly from R

-   Automatically updates your results if you change other code (e.g., if I decided to remove one observation from my data set, I wouldn't have to re-type all my numbers)

-   Creates a record of exactly how you calculated every number (so another scientist could easily reproduce your entire analysis, and you will never forget how you calculated something)

In the remainder of this section, we suggest strategies that support reproducibility.

## Use RStudio projects

An important principle is to keep your scripts, data files, and all other inputs and outputs within a [project](https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects) folder. Using an RStudio "project" makes directory organization easy, decreasing reliance on `setwd()` commands in your scripts. You would not refer to files outside of this project folder, but instead would use subfolders (e.g., "data", "images", etc.) to organize your work within your project.

Using project folders also works nicely with version control (Git) as the project folder becomes your version control "repository" for that project.

Let's make a new RStudio project named "new_project". In the GUI click:

File --\> New Project...

In the dialogue box that appears click:

New Directory --\> New Project

We can make "new_project" a subdirectory of: "\~/Home" and click "Create Project"

From here if your create a new `.qmd` file it will automatically be placed within the project's working directory. We will also set up a new project in the first lab.

The following best practices, used within RStudio projects, promote the reproducibility of your work even more.

### Use relative file paths, not full file paths

Best practice is to not include full paths ("C://Project_1/data/raw") to your files, but uses relative paths ("data/raw") instead, so they will be more portable -- able to run on someone else's system. Even better, use **`file.path()`** to construct these paths to make them platform independent, so a person can use, e.g., Windows, macOS, or Linux to reproduce your results. Windows users take note: paths like "C:\\data\\raw" or even "data\\raw" will not work on a Mac. Use "data/raw", or better yet, `file.path("data", "raw")` to solve this problem.

```{r file_paths}
#-----file paths---------

# Only works on Windows, as other modern operating systems (macOS, Linux) do 
# not support "drive letters", such as "P:"
full_path <- 'P:\\ENVH556'
full_path <- 'P:/ENVH556'

# Will not work on Windows, exposes your username, and won't work for other 
# users
full_path <- '/Users/joanna/ENVH556'

# If you are curious about what the "~" expands to, you can use path.expand()
full_path_to_home <- path.expand('~')
full_path_to_data <- path.expand('~/ENVH556')

# Will work on Windows, macOS, and Linux, etc., if the file is in the user's
# "home directory"
relative_path <- '~/ENVH556'

```

### Use the working directory

The "working directory" is a directory associated with your default position or location within a file system. For example, if you tell R to look for a file, it assumes you mean within the working directory. It is convenient to make your working directory the highest level directory associated with the files and data for an analysis. Meaning, for example, your `.qmd` file and the directory containing your data are within your working directory. With RStudio projects, this all becomes easier, because the project automatically "sets" the working directory. You can check the working directory at any time with the `getwd()` function.

You can even assign the working directory to a variable, to use with relative paths. For example, if you wanted to load an `.rds` data file within a hypothetical "Datasets" folder contained within your working directory you could do something like this with the helpful `file.path()` function:

```{r relative_path_example, eval=FALSE}
#-----relative path example-----

# assign working directory variable
work_dir <- getwd()

# build relative path to data file
relative_data_path <- file.path(work_dir, "Datasets", "data.rds")

# load data, assign to "df" variable
df <- readRDS(relative_data_path)

```

### Notes on working outside of RStudio projects

When working outside of an RStudio project, you'll have to specify your working directory. Just like the automatic organization that comes with using a project, you can make your default working directory the location of your `.qmd` file. If you want to change that default, you can use `setwd()`. For example, let's say my RDS file isn't in the same folder as my `.qmd`:

```{r setwd_example, eval=FALSE, echo=TRUE}
#-----setwd example---------

# Here we use a full file path, but it would be better to use a relative one
setwd("P:/ENVH556")

# Here we use a relative file path, where ".." means "one folder up"
setwd("../ENVH556")

# Here we use a relative file path with file.path(), the recommended method
# because this method supports muliple computing platforms (Windows, Mac, etc.)
setwd(file.path("..", "ENVH556"))

# Now we are ready to read the file
DEMS <- readRDS("DEMSCombinedPersonal.rds")

# You can see that my working directory changed with getwd()
getwd()

```

Using working directories would be especially helpful if you needed to load lots of different data files and you didn't want to type out all the file paths. If you always put your `.qmd` and data files in the same location, you should be able to use the default working directory without typing file paths.

One mild word of warning: there are some issues with working directories in R Markdown. If you are having trouble, you may want to make sure that `setwd()` is in the same chunk as your `readRDS()` command. There is also a more [elegant solution](http://pbahr.github.io/tips/2016/04/16/fix_rmarkdown_working_directory_issue) to this.

## Automate preparation of the working environment

When you write code in R Markdown it needs to be completely self-contained - that is, it can't rely on anything you loaded, imported, or run outside of the R Markdown document, e.g., in your RStudio session. An excellent principle is to automate the preparation of the working environment in your R Markdown document. This includes setting options and installing software packages.

### Install and load packages

A key principle is to only load the packages you will need for your project. To facilitate this, use the **`pacman` package** in R instead of `install.packages()` and `library()`. This will allow your script to automatically install any packages it needs to without forcing the installation of a package which has already been installed. Here is an example:

```{r setup_pacman, echo=TRUE, error=TRUE, eval=FALSE}
#-----setup pacman-----------

# Not evaluated here since done at the beginning of the file
# Load pacman into memory, installing as needed
my_repo <- 'http://cran.r-project.org'
if (!require("pacman")) {install.packages("pacman", repos = my_repo)}

# Load the other packages, installing as needed
pacman::p_load(knitr, tidyverse)

```

The first part installs `pacman` if it is missing, then the second part installs and loads the other packages as needed. If you do this at the top of your script for any packages needed later in your script, it makes it really easy for people to see what packages your script depends on. This approach will make it much more likely someone, particularly a new R user, will be able to run your script and reproduce your results. Many new R users get completely stuck if they run code that bombs simply because a package has not been installed. And just putting in `install.packages()` calls "just in case" will needlessly slow down your script (each and every time it is run) if the packages have already been installed.

## Use inline code

One way to ensure reproducibility is to use in-line code. This incorporates R results directly within text. To include code output in a sentence, we use the format of one backtick followed by "r", a space, and then some R code, and ending with a second backtick. For example, we can write: "The mean of the data is **`r mean(a)`**." We've seen above that output from chunks is usually not 'pretty' enough for refined reports, so ideally you pay attention to scientific reporting standards, for instance by rounding it to an appropriate number of significant figures: The mean is `r round(mean(a), 2)`. This is much better than directly typing into your text "The mean is 0.217" because it follows several reproducibility principles:

-   Eliminates typos
-   Automatically updates if you change other code (i.e. if I decided to remove one person from my data set, I wouldn't have to re-type all my numbers)
-   Creates a record of exactly how you calculated every number (so another scientist could easily reproduce your entire analysis, and you will never forget how you calculated something)

In general, only use the in-line code format for printing out one or two numbers. If you need a table or plot, that needs to come from a chunk.

## Report session information, code, and functions in the Appendix

When you turn in assignments, in addition to your well-written answers (which should not have any code or raw output), you will need to include the session information, embedded code, and functions defined in the .qmd in a code appendix.

Both the the `LabReportGuidelines.qmd` template for ENVH 556 and the appendix at the end of this document provide you with example code to accomplish this.

### Session Information

At a minimum, your `.qmd` should record version numbers of R and your packages with `sessionInfo()` at the end of your script.

```         
sessionInfo()
```

### Code embedded in the R Markdown file

For ENVH 556, we also want to see all of your code consolidated at the end of your R Markdown output. The following code for a chunk header will compile all your code into an appendix code listing. (This next version is for display in the rendered document and not for execution. A working version that is included in the appendix of this document. Note that the chunk header containing these options should be a single line of code with no line-wrap.)

```         
ref.label=knitr::all_labels(), echo=TRUE, eval=FALSE, include=TRUE
```

### Functions defined in the R Markdown file

You should also include a list of functions you created for your analysis (i.e. functions used in your analysis that were not part of loaded packages).

```         
# Show the names of all functions defined in the .qmd
# (e.g. loaded in the environment)
lsf.str()

# Show the definitions of all functions loaded into the current environment  
lapply(c(lsf.str()), getAnywhere)
```

Note that there is very little code embedded in these guidelines and no functions, so the second two chunks produce little or no output. Generally your files will have much longer code appendices.

## Document your code

We encourage you to adopt these best practices when commenting your code to improve readability:

-   Comment to keep a running commentary on what your code does.
-   The level of detail should be enough to clarify but not to enough to annoy.
-   Insert comments immediately before the line(s) of code to which they apply.
-   Add spaces and blank lines as needed to separate code and comments.
-   Avoid "side-commenting", putting comments at the end of a line of code.
-   Comments should state what the code does, in the form of an [imperative](https://www.wordnik.com/words/imperative).

Here is an example of these put into practice:

```{r comment_example, echo=TRUE, eval=FALSE}
#-----comment example-----------

# Create a vector of temperatures in degrees Celcius
temps <- c(21, 22, 20, 19, 19, 19, 22, 19)

# Calculate the mean temperature and standard deviation
mean(temps)
sd(temps)

```

## Follow a consistent style

Choose a code style and be consistent within your `.qmd`. Following established styles will make your code more readable and easier to follow - for both you and others. Here are two popular examples:

-   The [Tidyverse Style Guide](https://style.tidyverse.org/)
-   Google's [R Style Guide](https://google.github.io/styleguide/Rguide.xml)

# Tips on rendering to a PDF

While Markdown files most easily render to`.html`, You may want to knit your R Markdown directly to a `.pdf`. This is very easy; although sometimes you may need to install an extra package. To check whether your computer is already set up to knit to `.pdf`, try selecting the drop-down from the 'Knit' button and choosing 'Knit to PDF' (or change your header, as described below). If that doesn't work, you'll have to install the `tinytex` package. You can do this within R if you use the [tinytex](https://yihui.name/tinytex/) package, which is a minimal TeX package for R users.

```         
install.packages('tinytex', repos = 'http://cran.r-project.org')
tinytex::install_tinytex()
```

You would only need to run these commands once. You would not normally include them in a regular R script, as doing so would needlessly repeat the installation, unless you take special precautions, such as wrapping the code in an `if` block as as shown below.

```{r install_tinytex, eval=FALSE, echo=TRUE}
#-----install tinytex-----

if (!file.exists(Sys.which('texi2dvi'))) {
    # This can take a long time to run
    install.packages('tinytex', repos = 'http://cran.r-project.org')
    tinytex::install_tinytex(force=TRUE)
    if (tinytex:::is_tinytex() != TRUE) warning('tinytex failed to install!')
}

```

If you need a more complete TeX package for other uses, you will need to download and install more software, separately from R. For Windows users, there is an awesome tutorial [here](https://medium.com/@sorenlind/create-pdf-reports-using-r-r-markdown-latex-and-knitr-on-windows-10-952b0c48bfa9), and there is also a [Mac version](https://medium.com/@sorenlind/create-pdf-reports-using-r-r-markdown-latex-and-knitr-on-macos-high-sierra-e7b5705c9fd).\
This will walk you through what you need to install (it also goes through installing R and RStudio, but you can just skip that). Once everything is installed, you can set your output to `pdf_document` instead of `html_document` to switch between `.html` and `.pdf` files.


# Appendix {.unnumbered}

## Session information {.unnumbered}

```{r session info}
#-----session info------

sessionInfo()

```

## Embedded code {.unnumbered}

```{r code appendix, ref.label=knitr::all_labels(),echo=TRUE,eval=FALSE, tidy=TRUE, tidy.opts=list(width.cutoff=60), include=T}
#-----code appendix-------

```

## Custom functions {.unnumbered}

```{r functions.defined.in.this.qmd, eval = TRUE}
#-----functions defined in this Rmd ------------

# Show the names of all functions defined in the .qmd
# (e.g. loaded in the environment)
lsf.str()

# Show the definitions of all functions loaded into the current environment  
lapply(c(lsf.str()), getAnywhere)

```
